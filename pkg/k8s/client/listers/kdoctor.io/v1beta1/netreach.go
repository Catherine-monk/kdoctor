// Copyright 2023 Authors of kdoctor-io
// SPDX-License-Identifier: Apache-2.0

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kdoctor-io/kdoctor/pkg/k8s/apis/kdoctor.io/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetReachLister helps list NetReaches.
// All objects returned here must be treated as read-only.
type NetReachLister interface {
	// List lists all NetReaches in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.NetReach, err error)
	// Get retrieves the NetReach from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.NetReach, error)
	NetReachListerExpansion
}

// netReachLister implements the NetReachLister interface.
type netReachLister struct {
	indexer cache.Indexer
}

// NewNetReachLister returns a new NetReachLister.
func NewNetReachLister(indexer cache.Indexer) NetReachLister {
	return &netReachLister{indexer: indexer}
}

// List lists all NetReaches in the indexer.
func (s *netReachLister) List(selector labels.Selector) (ret []*v1beta1.NetReach, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.NetReach))
	})
	return ret, err
}

// Get retrieves the NetReach from the index for a given name.
func (s *netReachLister) Get(name string) (*v1beta1.NetReach, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("netreach"), name)
	}
	return obj.(*v1beta1.NetReach), nil
}
